We were asked to make the Watlab hydraulic solver faster. To do so, we proposed several solutions guided by a deep understanding of the underlying program structure and the operated hardware as well as a broad range of diagnosis tools such as `gprof`, Intel Advisor, Intel VTune, and NVIDIA Nsight Compute. The presented approaches included leveraging multicore processor architecture through parallelism, optimizing memory accesses, and harnessing GPU power. All our implementations reduced execution time while preserving floating-point accuracy wherever possible. Specifically, the threads based implementation coupled with optimized memory accesses achieved speedups up to 7.88 on a small case model and up to 10.47 on a larger case study compared to the vanilla serial implementation. In addition, a functional implementation based on GPU offloading has been presented, which reaches maximum speedups of 12.44 and 26.67 respectively on the same models. The latter relies on AdaptiveCpp, a novel HPC abstraction library resulting in a simple, efficient, modular but above all portable implementation that can be executed on a broad range of hardware such as CPUs and NVIDIA, AMD or Intel GPUs, thanks to a state of the art runtime backend detection mechanism. The CPU backend leverages OpenMP and remains competitive with respect to the previous parallel implementation, enabling the encapsulation of all versions into a single executable. Ultimately, this contributes to a more sustainable world by enabling larger and more precise simulations on real case studies. An efficient SWE solver, for example, makes it possible to prototype a broader range of preventive infrastructures to fight floods.

As highlighted in the previous chapter, some work still needs to be done to fully exploit GPU capabilities and continue providing the best possible tools to the UCLouvain hydraulic research team. This will support their pursuit of knowledge in understanding, modeling, and governing the hydraulic phenomena that surround us every day.
