The Centre for Research on the Epidemiology of Disasters @cred reports that floods are the most frequent weather related disasters in Europe over the 2001 to 2020 period, accounting for 40 percent of them. Furthermore, floods also lead to the highest total economic losses above storms and are the second disaster causing the most fatalities after heatwaves.

Regretfully, many events in the past few years reminded us of these brutal realities. A few notable ones are:
/ July 2021 -- Eastern Belgium and southern Germany: Extreme precipitations dramatically increased river levels in mid July 2021 in various European countries, mainly Germany, Belgium and the Netherlands, triggering widespread flooding @nhess-22-3831-2022. The events claimed many lives, with at least 240 fatalities @EEA2024ClimateHealth and led to 48 billion euros of damage @nhess-23-525-2023.

/ May 2023 -- Emilia-Romagna region, Italy: Northern Italy faced two heavy rainfall events starting on 1st and 16th May. During the second event, rains expected over a period of 6 months fell in 36 hours @Barnes, causing at least 15 deaths, overflowing 23 rivers and displacing 36 000 people @nhess-24-673-2024.

/ October 2024 -- Province of Valencia, Spain: On 29 October, powerful storms took place in the province of Valencia and adjacent ones, leading to severe flooding that took the lives of 232 people and caused large infrastructure damages with total economic losses of 16.5 billion euros @C3S_WMO_2025.

As one European out of eight lives in a flood prone area @EEA2024ClimateHealth, it is necessary to deploy preventive infrastructures such as dikes and compensatory flood storage areas. To assess the suitability and efficiency of such solutions, civil engineers need tools that can predict their interaction with moving water. It is one among the many applications of the Watlab software, a program that can simulate shallow water dynamics and that is developed by the hydraulics research team of UCLouvain, led by Pr. Sandra Soares-Fraz√£o.

The main issue with the Watlab software, which will reside at the heart of the following study, is the long execution time it requires to compute simulations. For example, an uninterrupted day of computer processing can only generate approximately one hour of simulated water in the largest case study to be evaluated in the following chapters.

Such computational slowness constrains researchers to reduce the size of studied zones or to consider less precise simulations, ultimately missing potential or more suitable solutions.

The objective of this study is simply to make Watlab faster. To do so, @ch2 begins by presenting the underlying governing equations that determine how Watlab works in order to better understand the derived algorithmic structure of the program and its intrinsic limitations, as well as to identify potential leads that could accelerate it. Then, @ch3 reviews the different technologies that will be explored to achieve reduced execution time, as well as a state of the art of the approaches followed by other hydraulic researchers throughout the world who deal with identical issues. In addition, @ch4 presents the case studies that will be used to assess the efficiency of the proposed solutions. Then, @ch5 begins with an empirical analysis of the program execution to see if it verifies the theoretical assumptions made in @ch2 about Watlab bottlenecks, after which implementations leveraging the multicore architecture of modern processors are presented, along with the associated challenges and optimizations discovered during their development. The section ends by assessing the performance of the solutions on the case studies to measure the associated gains.

Afterwards, @ch6 presents the work performed on Graphics Processing Units (GPUs), beginning with a review of their architecture and the reasons that motivate their study in the context of Watlab acceleration. Next, a Proof of Concept is introduced that serves several objectives. It first demonstrates the actual gains brought by the GPU technology on a simplistic but representative prototype of Watlab, and also helps to choose the most appropriate development framework to achieve it. In addition, some optimizations are tested to assess their relevance for a future final GPU implementation of Watlab. Finally, the section concludes by presenting an implementation of Watlab that leverages GPU power, detailing the difficulties and limitations encountered, and an assessment of the corresponding performance on the case studies.

To conclude, @ch7 details the future work that remains to be fulfilled to make Watlab even faster.
